import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from mistralai import Mistral
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "7204773293:AAGoXLtiJkwaXnU9_kkt3yKoKqZcOS6XUZA")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY", "rc71c6xJKYWbnfUSlvxRDi0UkmjgNfWI")
MODEL = "mistral-large-latest"
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = Mistral(api_key=MISTRAL_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ Mistral AI. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!")


@dp.message()
async def handle_message(message: Message):
    try:
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        await bot.send_chat_action(message.chat.id, "typing")

        # –ó–∞–ø—Ä–æ—Å –∫ Mistral AI
        chat_response = client.chat.complete(
            model=MODEL,
            messages=[{
                "role": "user",
                "content": message.text,
            }]
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await message.reply(chat_response.choices[0].message.content, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")


async def on_startup(bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º URL —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "https://your-app-name.onrender.com") + WEBHOOK_PATH

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.set_webhook(
        url=WEBHOOK_URL,
        drop_pending_updates=True
    )
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook: {WEBHOOK_URL}")


async def on_shutdown(bot: Bot):
    logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
    await bot.delete_webhook()


async def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        secret_token=BOT_TOKEN[:50]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∫ secret
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    webhook_handler.register(app, path=WEBHOOK_PATH)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    async def health_check(request):
        return web.Response(text="Bot is running")

    app.router.add_get("/", health_check)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    return app


if __name__ == "__main__":
    app = asyncio.run(main())
    web.run_app(app, host=WEBHOOK_HOST, port=WEBHOOK_PORT)